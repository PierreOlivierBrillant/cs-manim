[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cs-manim"
version = "0.1.4"
description = "Video animations with Manim to explain technical concepts related to computer science"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Pierre-Olivier Brillant", email = "pierreolivierbrillant@gmail.com"}
]
maintainers = [
    {name = "Pierre-Olivier Brillant", email = "pierreolivierbrillant@gmail.com"}
]
keywords = ["manim", "animation", "education", "computer-science", "visualization", "teaching"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Education",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "manim>=0.19.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/PierreOlivierBrillant/cs-manim"
Repository = "https://github.com/PierreOlivierBrillant/cs-manim"
"Bug Tracker" = "https://github.com/PierreOlivierBrillant/cs-manim/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["cs_manim*"]

[tool.setuptools.package-data]
cs_manim = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
  | venv
  | media
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "manim.*",
    "numpy.*",
    "scipy.*",
    "PIL.*",
    "pydub.*",
    "av.*",
    "moderngl.*",
    "glcontext.*",
    "pyglet.*",
    "pyglm.*",
    "screeninfo.*",
    "watchdog.*",
    "rich.*",
    "tqdm.*",
    "networkx.*",
    "beautifulsoup4.*",
    "srt.*",
    "skia_pathops.*",
    "svgelements.*",
    "mapbox_earcut.*",
    "isosurfaces.*",
    "audioop_lts.*",
]
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py310"
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".tox",
    ".mypy_cache",
    "examples",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "C90", # mccabe complexity
    "I",   # isort
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "F403",  # star imports allowed for manim
    "F405",  # star imports allowed for manim
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"examples/*" = ["F403", "F405"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/__pycache__/*",
    "*/examples/*",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::SyntaxWarning",
    "ignore::UserWarning",
    "ignore:.*__version__.*:DeprecationWarning",
    "ignore:.*invalid escape sequence.*:SyntaxWarning",
]
